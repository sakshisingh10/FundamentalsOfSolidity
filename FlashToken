// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
import "./IERC20.sol";
 
contract FlashToken is IERC20 {
 
    uint private totalToken;
    address owner;
 
    mapping(address userAddress => uint256 token) userBalance;
    mapping (address => mapping( address => uint256 )) Allowances;
 
    constructor( ) {
         owner = msg.sender;
 
    }
 
    function mint(address to , uint256 _totalToken ) external {
        userBalance[to] += _totalToken;
        totalToken += _totalToken;
       
    }
 
    function totalSupply() external view returns(uint256){
        return totalToken;
    }
 
    function balanceOf(address account) external view returns(uint256){
        return userBalance[account];
        }
 
    function transfer(address to, uint256 amount) external returns (bool){
        require (userBalance[owner] >= amount ," Insufficient balance in sender account");
        userBalance[owner] -= amount;
        userBalance[to]+= amount;
        emit Transfer(owner,to,amount);
        return true;
       
        }
 
    function allowance(address owner, address spender) external view returns (uint256){
        return Allowances[owner][spender];
        }
 
    function approve(address spender, uint256 amount) external override returns (bool) {
        Allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
        return true;
    }
 
    function transferFrom(address from, address to, uint256 amount) external override returns (bool) {
        require(userBalance[from] >= amount, "Insufficient balance in sender account");
        require(Allowances[from][owner] >= amount, "Insufficient allowance");
        userBalance[from] -= amount;
        userBalance[to] += amount;
        Allowances[from][owner] -= amount;
        emit Transfer(from, to, amount);
        return true;
    }
}
