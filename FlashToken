// SPDX-License-Identifier: MIT
pragma solidity >=0.8.2 <0.9.0 ;
import "IERC20.sol";
contract FlashToken is IERC20 {
    uint private totalTokens;
    string private tokenName;
    string private tokenSymbol;
    address owner;
    event Transfer(address indexed from, address indexed to,uint256 value);
    

    mapping(address userAddress => uint tokens) userBalances;
    constructor(){
        owner = msg.sender;
    }


     function mint (uint _noOfTokens) external {
        totalTokens += _noOfTokens;
         userBalances[owner]= totalTokens;
    
    }

    function totalSupply() external view override returns (uint256){
        return totalTokens;

    }

    function transfer(address to, uint256 amount) external returns (bool){
         require(userBalances[owner] >= amount, "Insufficient Balance");
         userBalances[owner] -= amount;
         userBalances[to] += amount; 
         emit Transfer(owner, to, amount);
         return true;
    }

    function balanceof(address account) external view returns (uint256){
         return userBalances[account];  
    }


}
